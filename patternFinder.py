import os,sys,numpy
import matplotlib,matplotlib.pyplot

def peaksDistributionPlotter(peaks,flag):

    '''
    this function build 2D histograms of peaks fe and size
    '''

    x=[];y=[]
    for name in peaks.keys():
        fe=peaks[name][-1]
        size=peaks[name][-2]
        
        x.append(fe)
        y.append(numpy.log10(size))

    print(numpy.mean(x))
    print(numpy.mean(y))

    feRange=[1,5]
    sizeRange=[2,4.05]

    h,xedges,yedges,tempo=matplotlib.pyplot.hist2d(x,y,bins=100,range=[feRange,sizeRange])
    z=numpy.log10(h+1).T
    zm=numpy.ma.masked_where(z == 0,z)

    #print(xedges)
    #print(yedges)
    #print(zm)
    
    newViridis=matplotlib.cm.viridis
    newViridis.set_bad('white')
    matplotlib.pyplot.imshow(zm,extent=[xedges[0],xedges[-1],yedges[0],yedges[-1]],cmap=newViridis,interpolation='nearest',origin='lower',aspect='auto',vmin=0,vmax=2)
    cb=matplotlib.pyplot.colorbar(label='log10 Peak Count',fraction=0.05)
    cb.ax.tick_params(labelsize=10)

    # highlightling area of best peaks
    matplotlib.pyplot.plot([2,5],[3,3],'-k',color='red')
    matplotlib.pyplot.plot([2,2],[2,3],'-k',color='red')
    
    matplotlib.pyplot.xlabel('Fold Enrichment')
    matplotlib.pyplot.ylabel('Peak Size (bp)')

    positions=numpy.log10(numpy.array([100,200,300,500,750,1000,2000,4000,8000]))
    names=['100','200','300','500','750','1,000','2,000','4,000','8,000']
    matplotlib.pyplot.yticks(positions,names)

    matplotlib.pyplot.title(flag)
    
    matplotlib.pyplot.savefig(figuresDir+'figure.%s.png'%flag)
    matplotlib.pyplot.clf()

    return None

def peaksFilter():

    '''
    this function removes any peak that is lower than 5-fold and extends for longer than 1 kb. 
    it also plots the distribution of filtred and non-filtred peaks.
    '''

    filteredPeaks={}

    Dfe=[]
    Dsize=[]
    Efe=[]
    Esize=[]

    for name in peaks.keys():
        fe=peaks[name][-1]
        size=peaks[name][-2]

        Dfe.append(fe)
        Dsize.append(size)
        
        if fe >= peakFEThreshold and size <= peakLengthThreshold:
            filteredPeaks[name]=peaks[name]
            
            Efe.append(fe)
            Esize.append(size)

    # printing the number of filtered peaks and summits
    allKeys=filteredPeaks.keys()
    numberOfSummits=len(allKeys)
    uniquePeaks=[]
    for element in allKeys:
        lastLetter=element[-1]
        if lastLetter.isdigit():
            value=int(element.split('.')[1])
        else:
            value=int(element.split('.')[1][:-1])
        uniquePeaks.append(value)
    uniquePeaks=list(set(uniquePeaks))
    numberOfPeaks=len(uniquePeaks)

    print('\t%s filtered peaks found; %s filtered summits found.'%(numberOfPeaks,numberOfSummits))    
    
    return filteredPeaks

def peakReader():

    '''
    this function reads specific information from the peaks file generated by MACS2.0
    '''

    peaks={} # a dictionary with the following structure: peaks[name]=[chro,start,end,length,fe]
    peaksFile=peaksDir+peaksFileName
    with open(peaksFile,'r') as f:
        for line in f:
            vector=line.split('\t')
            if len(vector) == 10:
                if 'peak' in vector[9]:

                    # name
                    brokenName=vector[9].split('_')
                    name=brokenName[1]+'.'+brokenName[2].replace('\n','')
                    # chr
                    chro=vector[0]
                    # start
                    start=int(vector[1])
                    # end
                    end=int(vector[2])
                    # length
                    length=int(vector[3])
                    # fold-enrichment
                    fe=float(vector[7])

                    peaks[name]=[chro,start,end,length,fe]

    lastLetter=name[-1]
    if lastLetter.isdigit():
        numberOfPeaks=int(name.split('.')[1])
    else:
        numberOfPeaks=int(name.split('.')[1][:-1])
    numberOfSummits=len(peaks.keys())

    print('\t%s peaks found; %s summits found.'%(numberOfPeaks,numberOfSummits))

    return peaks

# 0. user defined variables
peaksDir='/Volumes/omics4tb/alomana/projects/csp.jgi/data/macs2.run3/'
#peaksDir='/Users/adriandelomana/scratch/macs2.run3/'
figuresDir='/Users/alomana/gDrive2/tmp/'
#figuresDir='/Users/adriandelomana/gDrive/tmp/'


correspondance={}
correspondance['0hA']='ASCAO'
correspondance['0hB']='ASCAP'
correspondance['24hA']='ASCAS'
correspondance['24hB']='ASCAT'
correspondance['48hA']='ASCAU'
correspondance['48hB']='ASCAW'

peakFEThreshold=2
peakLengthThreshold=1000

# 1. selecting the samples
print('selecting samples...')
allFiles=os.listdir(peaksDir)
peaksFileNames=[element for element in allFiles if '_peaks.xls' in element if 'callerC' in element]
peaksFileNames.sort()

# 2. filter peaks: at least 5-fold and no longer than 1 kb
print('filtering samples...')
for peaksFileName in peaksFileNames:
    
    print('working with sample %s...'%peaksFileName)
    # 2.1. reading peaks
    peaks=peakReader()

    # 2.2. filtering peaks
    filteredPeaks=peaksFilter()

    # 2.3. plot the distribution of peaks before and after filtering peaks
    flag=peaksFileName.split('_peaks')[0]
    peaksDistributionPlotter(peaks,flag)

# 3. define all genes that have matching patterns
#print('finding matching pattern peaks...')
# 3.1. 101 signature

# 3.1. 010 signature

# 4. define significance
#print('assessing signficance of found patterns...')
